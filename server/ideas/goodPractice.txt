When building a MERN (MongoDB, Express.js, React, Node.js) app using the MVC (Model-View-Controller) structure, here are some additional good practices to consider:

1. Separate Concerns: Follow the principle of separation of concerns by keeping your code modular and separating different aspects of the application. For example, keep database operations in the models, business logic in the controllers, and view-related logic in the views or React components.

2. Proper Directory Structure: Organize your files and folders in a structured manner. Create separate directories for models, views, controllers, routers, utilities, and other relevant components. This helps maintain a clean and easily navigable project structure.

3. Consistent Naming Conventions: Use consistent and meaningful names for files, folders, variables, and functions. This improves code readability and makes it easier for other developers (and yourself) to understand the purpose and functionality of each element.

4. Use Middleware: Utilize middleware functions in Express.js to handle common tasks such as authentication, request validation, error handling, and logging. Middleware helps keep your codebase clean, modular, and reusable.

5. Error Handling: Implement proper error handling throughout your application. Use try...catch blocks to catch and handle exceptions, and create custom error handlers to provide informative error messages and appropriate HTTP status codes.

6. Input Validation: Validate user input on both the client and server sides to prevent potential security vulnerabilities and ensure data integrity. Libraries like Joi, Yup, or validator.js can assist in validating incoming data.

7. Use ORM/ODM Libraries: Consider using an Object-Relational Mapping (ORM) or Object-Document Mapping (ODM) library, such as Mongoose for MongoDB, to simplify database interactions and provide a more structured way to define models and schemas.

8. Version Control: Utilize a version control system like Git to track changes in your codebase, collaborate with others, and revert to previous versions if needed. Follow best practices for branching, committing, and merging code.

9. Testing: Implement automated testing for your application, including unit tests, integration tests, and end-to-end tests. Use frameworks like Jest or Mocha for server-side testing and tools like React Testing Library or Enzyme for client-side testing.

10. Security Considerations: Pay attention to security best practices, such as properly handling user authentication and authorization, protecting against common vulnerabilities like cross-site scripting (XSS) and SQL injection, and securing your API endpoints.

Remember that these practices provide a starting point, and you can adapt and refine them based on the specific needs and requirements of your application.